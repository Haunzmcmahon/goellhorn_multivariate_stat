---
title: "project"
format:
  pdf:
    toc: true
    number-sections: true
    colorlinks: true
editor: visual
execute: 
  warning: false
  message: false
---

{{< pagebreak >}}
```{r}
#| echo: true
#| output: false
library(tidyverse)
library(ggplot2)
library(reshape2)
library(dplyr)
library(tidyr)
library(MASS)  # For Box-Cox
library(moments)  # For skewness/kurtosis
library(ggfortify)
library(viridis)  # For a professional color palette
library(ggpubr)   # For boxplots    # For normality tests and transformations
library(ggthemes) # For better themes
library(kableExtra)
library(GGally)
library(vcd)
```
# Introduction
fgfgfgfg

# Setting up our relevant dataset:

```{r}
data_loc = "mc.csv"
data <- read.csv(data_loc)
#-3 values represent null values so we assing NA
data[data == -3] <- NA
#subset = styria -> NUTS2 = AT22
data <- data |> filter(xnuts2 == 22)
#filtering only for the relevant Predictors
data <- data |>dplyr::select(werr, dseitz, dstd, kjahr, xanzkind, xminalt,
            balt5, bsex,bfst, xbstaat, xbgeblan, xhatlevel, xeinw, xlfi,xpatch)
head(data)

data <- data %>%
    mutate(
    werr = factor(werr, levels = 1:8, 
                  labels = c("before 1919", "1919-1944", "1945-1960", 
                             "1961-1970", "1971-1980", "1981-1990", 
                             "1991-2000", "after 2000")),
    
    balt5 = factor(balt5, levels = 0:15, 
                   labels = c("0-14", "15-19", "20-24", "25-29", "30-34", "35-39", 
                              "40-44", "45-49", "50-54", "55-59", "60-64", "65-69", 
                              "70-74", "75-79", "80-84", "85+")),
    
    bsex = factor(bsex, levels = c(1, 2), labels = c("Male", "Female")),
    
    bfst = factor(bfst, levels = 1:4, 
                  labels = c("Single", "Married", "Widowed", "Divorced")),
    
    xbstaat = factor(xbstaat, levels = 1:7, 
                     labels = c("Austria", "EU15 without Austria", "EU15 10 new members", 
                                "Former Yugoslavia", "Turkey", "Other countries", "Bulgaria/Romania")),
    
    xbgeblan = factor(xbgeblan, levels = 1:7, 
                      labels = c("Austria", "EU15 without Austria", "EU15 10 new members", 
                                 "Former Yugoslavia", "Turkey", "Other countries", "Bulgaria/Romania")),
    
    xhatlevel = factor(xhatlevel, levels = c(0, 11, 21, 22, 30, 31, 32, 41, 42, 43, 51, 52, 60, 99), 
                       labels = c("ISCED 0/1", "ISCED 1", "ISCED 2", "ISCED 3c <2 years", 
                                  "ISCED 3", "ISCED 3c 2+ years", "ISCED 3a, b", "ISCED 4a, b", 
                                  "ISCED 4c", "ISCED 4", "ISCED 5b", "ISCED 5a", "ISCED 6", "Not applicable")),
    
    xeinw = factor(xeinw, levels = 1:4, 
                   labels = c("up to 2000", "2001-10000", "10001-100000", "100001+")),
    
    xlfi = factor(xlfi, levels = 1:3, 
                  labels = c("Employed", "Unemployed", "Not in labor force")),
    
    xpatch = factor(xpatch, levels = c(1, 2), labels = c("Yes", "No"))
  )
data <- na.omit(data)

head(data)
```
```{r}
data.numeric <-c("dseitz","dstd","kjahr","xanzkind")
data.polytomous <- c("balt5","bfst","xbstaat","xbgeblan","xhatlevel","xeinw","xlfi")
data.categorical <- c("balt5","bsex","bfst","xbstaat","xbgeblan","xhatlevel","xeinw","xlfi","xpatch")
```
{{< pagebreak >}}

# Descriptice Analysis

## Numeric Variables

```{r}
# Load required libraries
library(ggplot2)
library(ggpubr)

# Define the function
plot_numeric_variable <- function(data, column_name, target_variable,plot_title) {
  
  # Histogram with density line
  hist_plot <- ggplot(data, aes_string(x = column_name)) +
    geom_histogram(aes(y = ..density..), bins = 30) +
    geom_density() +
    labs(x = "Data", y = "Density") +
    ggtitle("Histogram") +
    theme_grey() +
    scale_colour_grey()
  
  # Boxplot
  boxplot <- ggplot(data, aes_string(y = column_name)) +
    geom_boxplot() +
    xlim(-1, 1) +
    labs(y = "Data") +
    ggtitle("Boxplot") +
    theme_grey() +
    scale_colour_grey() +
    scale_fill_grey()
  
  # Relationship between the numeric variable and the categorical target variable
  relationship_plot <- ggplot(data, aes_string(x = target_variable, y = column_name)) +
    geom_boxplot() +
    labs(x = target_variable, y = column_name) +
    ggtitle("relationship with target werr") +
    theme_grey() +
    scale_colour_grey() +
    scale_fill_grey()
  
  # Arrange all three plots in one row
  plot <- ggarrange(hist_plot, boxplot, relationship_plot, ncol = 3, nrow = 1, widths = c(0.5,0.2,1))
  
  # Add title to the combined plot
  plot_with_title <- annotate_figure(plot, 
                                     top = text_grob(paste(plot_title, target_variable), 
                                                     face = "bold", size = 14))
  
  # Return the plot with title
  return(plot_with_title)
}

```

### dseitz: working in the current job since. . . (in months)
```{r}
summary(data$seitz)
sd(data$dseitz)
```

```{r fig.width=11.7, fig.height=8.3/3, out.width="100%", dpi=300}
#|warning: false
#|
plot_numeric_variable(data, "dseitz","werr","dseitz: working in the current job since. . . (in months)")
#plot_numeric_variable(data, "dstd","werr","dstd: normal weekly working hours")
#plot_numeric_variable(data, "kjahr","werr","kjahr: years since completing the highest level of education")
#plot_numeric_variable(data, "xanzkind","werr","xanzkind: number of children under 18 in the family")
#plot_numeric_variable(data, "xminalt","werr","age of youngest child in the family (in years)")

```
The histogram shows that the variable follows a right-skewed distribution and has a high spread.
Trough the boxplot we see that most values are between 0 and 200 with some outliers above 400.
The box plot categorized by the buildings-Year shows that the distribution of dseitz differs across the categories.
Additionally we see some outliers, but none of the seem to strongly influence the mean of the category, except 1919-1944 which shows a mean skewed towards the outlier.

The skeweness and the different distributions throughout the categories might indicate that a transformation would help to conform more to a normal-distribution.

```{r fig.width=11.7, fig.height=8.3/2, out.width="100%", dpi=300}
#| echo: false
# Load required libraries
library(ggplot2)
library(ggpubr)

# Define the function to compare transformations
plot_numeric_variable_with_transformation <- function(data, column_name, target_variable) {
  
  # Original Histogram with density line
  hist_plot_original <- ggplot(data, aes_string(x = column_name)) +
    geom_histogram(aes(y = ..density..), bins = 30) +
    geom_density() +
    labs(x = "Data", y = "Density (Original)") +
    theme_grey() +
    scale_colour_grey()
  
  # Original Boxplot
  boxplot_original <- ggplot(data, aes_string(y = column_name)) +
    geom_boxplot() +
    xlim(-1, 1) +
    labs(y = "Data (Original)") +
    theme_grey() +
    scale_colour_grey() +
    scale_fill_grey()

  # Apply transformation (sqrt in this case)
  data_transformed <- data
  data_transformed[[paste0(column_name, "_sqrt")]] <- sqrt(data[[column_name]])

  # Transformed Histogram with density line
  hist_plot_transformed <- ggplot(data_transformed, aes_string(x = paste0(column_name, "_sqrt"))) +
    geom_histogram(aes(y = ..density..), bins = 30) +
    geom_density() +
    labs(x = "Data", y = "Density (Transformed)") +
    theme_grey() +
    scale_colour_grey()

  # Transformed Boxplot
  boxplot_transformed <- ggplot(data_transformed, aes_string(y = paste0(column_name, "_sqrt"))) +
    geom_boxplot() +
    xlim(-1, 1) +
    labs(y = "Data (Transformed)") +
    theme_grey() +
    scale_colour_grey() +
    scale_fill_grey()

  # Relationship Plot (Original)
  relationship_plot_original <- ggplot(data, aes_string(x = target_variable, y = column_name)) +
    geom_boxplot() +
    labs(x = target_variable, y = column_name) +
    theme_grey() +
    scale_colour_grey() +
    scale_fill_grey()

  # Relationship Plot (Transformed)
  relationship_plot_transformed <- ggplot(data_transformed, aes_string(x = target_variable, y = paste0(column_name, "_sqrt"))) +
    geom_boxplot() +
    labs(x = target_variable, y = paste0(column_name, " (Transformed)")) +
    theme_grey() +
    scale_colour_grey() +
    scale_fill_grey()

  # Arrange all six plots in a grid (before and after transformation, both distributions and relationships)

  plot <- ggarrange(
    hist_plot_original,boxplot_original,relationship_plot_original,
    hist_plot_transformed,boxplot_transformed,relationship_plot_transformed,
    ncol = 3, nrow = 2,widths = c(0.5,0.5,1)
  )
  
  # Add title to the combined plot
  plot_with_title <- annotate_figure(plot, 
    top = text_grob(paste("Comparison of Original and Transformed (sqrt) Data",column_name), 
    face = "bold", size = 14,))

  # Return the plot with title
  return(plot_with_title)
}

```
```{r fig.width=11.7, fig.height=8.3/2, out.width="100%", dpi=300}
plot_numeric_variable_with_transformation(data,"dseitz","werr")
# Perform Shapiro-Wilk test before transformation
shapiro_before <- shapiro.test(data$dseitz)
data_sqrt <- sqrt(data$dseitz)
shapiro_after <- shapiro.test(data_sqrt)

# Create a formatted table of test results
shapiro_results <- data.frame(
  Test = c("Original Data", "Square Root Transformed"),
  W_Statistic = c(shapiro_before$statistic, shapiro_after$statistic),
  P_Value = c(shapiro_before$p.value, shapiro_after$p.value)
)
kable(shapiro_results, caption = "Shapiro-Wilk Normality Test Results", digits = 5)
```
After applying the 
```{r}

pair_data <- data[,data.numeric]
ggpairs(pair_data,
        lower = list(continuous = "smooth"), # Smoothed scatterplots on the lower panel
        diag = list(continuous = "densityDiag"), # Density plots on the diagonal
        upper = list(continuous = "cor")) # Add correlation coefficients on the upper panel
```


#### **Examine Outliers**

```{r fig.width=11.7, fig.height=8.3/2, out.width="100%", dpi=300}
#| echo: false
# Load required libraries
library(ggplot2)
library(ggpubr)

# Define the function to compare transformations
plot_numeric_variable_with_transformation <- function(data, column_name, target_variable) {
  
  # Original Histogram with density line
  hist_plot_original <- ggplot(data, aes_string(x = column_name)) +
    geom_histogram(aes(y = ..density..), bins = 30) +
    geom_density() +
    labs(x = "Data", y = "Density (Original)") +
    theme_grey() +
    scale_colour_grey()
  
  # Original Boxplot
  boxplot_original <- ggplot(data, aes_string(y = column_name)) +
    geom_boxplot() +
    xlim(-1, 1) +
    labs(y = "Data (Original)") +
    theme_grey() +
    scale_colour_grey() +
    scale_fill_grey()

  # Apply transformation (sqrt in this case)
  data_transformed <- data
  data_transformed[[paste0(column_name, "_sqrt")]] <- sqrt(data[[column_name]])

  # Transformed Histogram with density line
  hist_plot_transformed <- ggplot(data_transformed, aes_string(x = paste0(column_name, "_sqrt"))) +
    geom_histogram(aes(y = ..density..), bins = 30) +
    geom_density() +
    labs(x = "Data", y = "Density (Transformed)") +
    theme_grey() +
    scale_colour_grey()

  # Transformed Boxplot
  boxplot_transformed <- ggplot(data_transformed, aes_string(y = paste0(column_name, "_sqrt"))) +
    geom_boxplot() +
    xlim(-1, 1) +
    labs(y = "Data (Transformed)") +
    theme_grey() +
    scale_colour_grey() +
    scale_fill_grey()

  # Relationship Plot (Original)
  relationship_plot_original <- ggplot(data, aes_string(x = target_variable, y = column_name)) +
    geom_boxplot() +
    labs(x = target_variable, y = column_name) +
    theme_grey() +
    scale_colour_grey() +
    scale_fill_grey()

  # Relationship Plot (Transformed)
  relationship_plot_transformed <- ggplot(data_transformed, aes_string(x = target_variable, y = paste0(column_name, "_sqrt"))) +
    geom_boxplot() +
    labs(x = target_variable, y = paste0(column_name, " (Transformed)")) +
    theme_grey() +
    scale_colour_grey() +
    scale_fill_grey()

  # Arrange all six plots in a grid (before and after transformation, both distributions and relationships)

  plot <- ggarrange(
    hist_plot_original,boxplot_original,relationship_plot_original,
    hist_plot_transformed,boxplot_transformed,relationship_plot_transformed,
    ncol = 3, nrow = 2,widths = c(0.5,0.5,1)
  )
  
  # Add title to the combined plot
  plot_with_title <- annotate_figure(plot, 
    top = text_grob(paste("Comparison of Original and Transformed (sqrt) Data",column_name), 
    face = "bold", size = 14,))

  # Return the plot with title
  return(plot_with_title)
}

```

```{r fig.width=11.7, fig.height=8.3/2, out.width="100%", dpi=300}
plot_numeric_variable_with_transformation(data,"dseitz","werr")
plot_numeric_variable_with_transformation(data,"dstd","werr")
plot_numeric_variable_with_transformation(data,"kjahr","werr")
plot_numeric_variable_with_transformation(data,"xanzkind","werr")
```

#### **Consider Transformations for Normality**


```{r fig.width=11.7, fig.height=8.3/2, out.width="100%", dpi=300}
# Function to remove outliers and compare distributions
remove_outliers_IQR <- function(data, column_name) {
  
  # Step 1: Identify Outliers using IQR
  Q1 <- quantile(data[[column_name]], 0.25)
  Q3 <- quantile(data[[column_name]], 0.75)
  IQR <- Q3 - Q1
  lower_bound <- Q1 - 1.5 * IQR
  upper_bound <- Q3 + 1.5 * IQR
  
  # Step 2: Create a new column 'is_outlier' to indicate outliers
  data$is_outlier <- ifelse(data[[column_name]] < lower_bound | data[[column_name]] > upper_bound, TRUE, FALSE)
  
  # Step 3: Remove the outliers by filtering the rows where 'is_outlier' is FALSE
  data_no_outliers <- data[data$is_outlier == FALSE, ]
  
  # Step 4: Return the dataset without outliers (with the 'is_outlier' column still present)
  return(data_no_outliers)
}

temp_data <- remove_outliers_IQR(data, "dstd")
temp_data
plot_numeric_variable_with_transformation(data,"dstd","werr")
plot_numeric_variable_with_transformation(temp_data,"dstd","werr")

```

## Categorical Variables

```{r}
# Bar plot of age group distribution
ggplot(data, aes(x = balt5)) +
  geom_bar(fill = "steelblue") +
  labs(title = "Distribution of Age Groups",
       x = "Age Group",
       y = "Count") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate labels for readability


```

```{r}
summary(data$balt5)
#dropping levels without any entries from the dataset
data$balt5 <- droplevels(data$balt5)
summary(data$balt5)
```
```{r}
ggplot(data, aes(x = balt5, fill = werr)) +
  geom_bar(position = "fill") +  # Stacked proportionally
  scale_fill_viridis_d(option = "plasma") +  # Gradual color transition
  labs(title = "Distribution of Age Groups by Construction Period",
       x = "Age Group",
       y = "Proportion",
       fill = "Construction Period") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate labels for readability

```




```{r}
# Create a clustered bar chart for 'bsex' and 'werr'
ggplot(data, aes(x = bsex, fill = werr)) +
  geom_bar(position = "dodge") +  # Clustered bar chart
  scale_fill_viridis_d(option = "plasma") +  # Gradual color scale
  labs(title = "Construction Period Distribution by Gender",
       x = "Gender",
       y = "Count",
       fill = "Construction Period") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 0, hjust = 0.5))  # Horizontal labels for clarity

```

```{r}
# Create a contingency table of gender (bsex) and construction period (werr)
contingency_table_gender <- table(data$bsex, data$werr)

print(contingency_table_gender)

# Perform the Chi-square test
chi_square_test <- chisq.test(contingency_table)

# View the result
print(chi_square_test)

```
p-value = 0.9221: Since the p-value is much larger than the common significance level of 0.05,the construction period distribution is not significantly different between males and females in your dataset.

```{r}
# Remove rows and columns with zero counts
contingency_table_bfst_clean <- contingency_table_bfst[rowSums(contingency_table_bfst) > 0, 
                                                       colSums(contingency_table_bfst) > 0]

print(contingency_table_bfst_clean)
mosaic(contingency_table_bfst_clean, shade = TRUE, legend = TRUE)
```


2.1.1 Introduction \[20\]

• Formulate research questions (see chapter 2.4.1 of the Meyer/Wurzer script) and research hypotheses, based on the predictors you selected

• Motivate the selection of the predictors - what was the reason for choosing them? • Describe starting point and objectives of your analysis • State the regression method you will use for your analysis (binary logistic, ordinal logistic, Poisson, . . . ) and justify your decision

2.1.2 Data collection \[10\] • Type of survey; facts concerning the execution of the survey (period etc.) ????? • Description of the data set/operationalization (type of sample, sample size, variables, scale levels, missing values etc.) • Data preparation (missing value treatment, transformations, . . . )

2.1.3 Descriptive analysis of the sample \[70\] • Descriptive analysis of the analyzed variable(s) – Diagrams, numerical measures, tables, . . . – All statistics have to be commented, in particular diagrams! – Are there any distinctive features? (e.g., group differences, trends, outliers, . . . ) • In detail, the following plots have to be produced: – Univariate visualizations of all variables – Bivariate relationships between predictors and response to show the influence of the former on the latter – Joint influences of all possible pairs of predictors on the response to show potential interactions (exception: the interaction between the two metric variables doesn’t have to be visualized) • Summary of the descriptive analysis. Based on these descriptive findings, segue to the analysis of the questions about the population
